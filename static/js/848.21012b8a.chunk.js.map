{"version":3,"file":"static/js/848.21012b8a.chunk.js","mappings":"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","sources":["components/ContactForm/contactForm.styled.js","components/Section/section.styled.js","components/Section/Section.jsx","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","redux/filter/selectors.js","components/FilterContacts/filterContacts.styled.js","components/FilterContacts/FilterContacts.jsx","components/Contact/contact.styled.js","components/Contact/Contact.jsx","components/ContactList/contactList.styled.js","components/ContactModal/contactModal.styled.js","components/ContactModal/ContactModal.jsx","components/ContactList/ContactListBar/contactListBar.styled.js","components/ContactList/ContactListBar/ContactListBar.jsx","components/ContactList/ContactList.jsx","pages/ContactPage.jsx"],"sourcesContent":["const { default: styled } = require('@emotion/styled');\n\nexport const ContactFormWrapper = styled.div`\n  max-width: 400px;\n`;\n\nexport const ContactUiForm = styled.form`\n  border-radius: 3px;\n`;\nexport const ContactDiv = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  margin-bottom: 20px;\n`;\n\nexport const ContactInput = styled.input`\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid rgb(150, 150, 150);\n  border-radius: 3px;\n\n  transition-property: border-color;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus {\n    border: 1px solid #4d5ae5;\n  }\n`;\n\nexport const ContactLabel = styled.label`\n  display: block;\n  margin-bottom: 7px;\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport const ContactButton = styled.button`\n  padding: 10px 20px;\n  outline: none;\n  border: 2px solid #4d5ae5;\n  border-radius: 5px;\n  background-color: transparent;\n  font-size: 16px;\n  cursor: pointer;\n\n  transition-property: border-color;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    border-color: #404bbf;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const SectionEl = styled.section`\n  &:not(:last-child) {\n    margin-bottom: 70px;\n  }\n`;\n","import { Container } from 'components/Container';\nimport PropTypes from 'prop-types';\nimport { SectionEl } from './section.styled';\n\nexport default function Section({ children, id }) {\n  return (\n    <SectionEl id={id}>\n      <Container>{children}</Container>\n    </SectionEl>\n  );\n}\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","export const getContacts = state => state.contacts.items;\nexport const isLoadingContacts = state => state.contacts.isLoading;\nexport const errorContacts = state => state.contacts.error;\n","import { useState } from 'react';\nimport {\n  ContactButton,\n  ContactDiv,\n  ContactFormWrapper,\n  ContactInput,\n  ContactLabel,\n  ContactUiForm,\n} from './contactForm.styled';\nimport Section from 'components/Section/Section';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactSelectors, contactOperation } from 'redux/contacts';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(contactSelectors.getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    if (name === 'name') {\n      setName(value);\n    }\n\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const isContactAlready = name => {\n    const checkContacts = contacts.find(el => el.name === name);\n\n    if (checkContacts) {\n      alert(`${name} is already in contacts`);\n      return true;\n    }\n  };\n\n  const handleForm = event => {\n    event.preventDefault();\n\n    if (!isContactAlready(name)) {\n      dispatch(contactOperation.addContact({ name, number }));\n    }\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Section id=\"phonebook\">\n      <ContactFormWrapper>\n        <h2>Phonebook</h2>\n        <ContactUiForm type=\"submit\" autoComplete=\"false\" onSubmit={handleForm}>\n          <ContactLabel htmlFor=\"name\">Name</ContactLabel>\n          <ContactDiv>\n            <ContactInput\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              placeholder=\"Put contact name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={handleChange}\n            />\n          </ContactDiv>\n\n          <ContactLabel htmlFor=\"number\">Tel</ContactLabel>\n          <ContactDiv>\n            <ContactInput\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Put contact phone\"\n              pattern=\"^[+]?[0-9\\\\.\\\\-\\\\s]{1,15}$\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              value={number}\n              onChange={handleChange}\n              required\n            />\n          </ContactDiv>\n          <ContactButton type=\"submit\">Add contact</ContactButton>\n        </ContactUiForm>\n      </ContactFormWrapper>\n    </Section>\n  );\n}\n","export const getFilter = state => state.filter;\n","import styled from '@emotion/styled';\n\nexport const FilterContactsInput = styled.input`\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid rgb(150, 150, 150);\n  border-radius: 3px;\n\n  transition-property: border-color;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus {\n    border: 1px solid #4d5ae5;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setFilter } from 'redux/filter/filter';\nimport { useSelector } from 'react-redux';\nimport { getFilter } from 'redux/filter/selectors';\nimport { FilterContactsInput } from './filterContacts.styled';\n\nexport default function FilterContacts({ title }) {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <div className=\"filter-wrapper\">\n      <h3>{title}</h3>\n      <FilterContactsInput\n        className=\"input-field filter\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </div>\n  );\n}\n\nFilterContacts.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","const { default: styled } = require('@emotion/styled');\n\nexport const ContactLi = styled.li``;\n\nexport const ContactWrapper = styled.div`\n  display: grid;\n  grid-template-columns: minmax(130px, 1fr) minmax(130px, 1fr) minmax(\n      100px,\n      0.5fr\n    );\n`;\n\nexport const ContactContent = styled.p``;\n\nexport const ContactGroupButtons = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  gap: 30px;\n`;\n\nexport const ContactButton = styled.button`\n  display: flex;\n  align-items: center;\n\n  padding: 0px;\n\n  font-size: 18px;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n\n  &:hover {\n    border-color: #111111;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  ContactButton,\n  ContactLi,\n  ContactWrapper,\n  ContactContent,\n  ContactGroupButtons,\n} from './contact.styled';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { BiTrash, BiEdit } from 'react-icons/bi';\n\nexport default function Contact({ name, number, id, handleUpdate }) {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ContactLi>\n        <ContactWrapper>\n          <ContactContent>{name}</ContactContent>\n          <ContactContent>{number}</ContactContent>\n          <ContactGroupButtons>\n            <ContactButton\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              <BiTrash />\n            </ContactButton>\n            <ContactButton type=\"button\" onClick={() => handleUpdate(id)}>\n              <BiEdit />\n            </ContactButton>\n          </ContactGroupButtons>\n        </ContactWrapper>\n      </ContactLi>\n    </>\n  );\n}\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","const { default: styled } = require('@emotion/styled');\n\nexport const ContactListUl = styled.ul`\n  padding: 0;\n  list-style: none;\n`;\n","import styled from '@emotion/styled';\n\nexport const ModalContactOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\nexport const ModalContactWindow = styled.div`\n  position: relative;\n  background-color: white;\n  overflow: hidden;\n  border-radius: 10px;\n`;\n\nexport const ModalContactIcon = styled.div`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n  cursor: pointer;\n`;\n\nexport const ModalContactTitle = styled.h2`\n  font-style: 24px;\n  margin: 0 0 15px 0;\n`;\n\nexport const ContactUiForm = styled.form`\n  width: 400px;\n  padding: 20px;\n`;\n\nexport const ContactDiv = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  margin-bottom: 15px;\n`;\nexport const ContactLabel = styled.label`\n  width: 100%;\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport const ContactButton = styled.button`\n  padding: 5px 10px;\n  border: 1px solid red;\n  border-radius: 5px;\n  background-color: transparent;\n  font-size: 16px;\n  cursor: pointer;\n`;\n","import { createPortal } from 'react-dom';\nimport { useEffect, useState } from 'react';\nimport {\n  ContactButton,\n  ContactDiv,\n  ContactLabel,\n  ContactUiForm,\n  ModalContactWindow,\n  ModalContactOverlay,\n  ModalContactTitle,\n  ModalContactIcon,\n} from './contactModal.styled';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contacts-operations';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nexport default function Modal({ handleModal, modalId }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    if (name === 'name') {\n      setName(value);\n    }\n\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleEscape = event => {\n    if (event.code === 'Escape') {\n      handleModal();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleEscape);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleOverlayClick = event => {\n    if (event.target === event.currentTarget) {\n      handleModal();\n    }\n  };\n\n  const handleModalForm = event => {\n    event.preventDefault();\n    dispatch(updateContact({ id: modalId, name, number }));\n    handleModal();\n  };\n\n  return createPortal(\n    <ModalContactOverlay onClick={handleOverlayClick}>\n      <ModalContactWindow>\n        <ContactUiForm\n          type=\"submit\"\n          autoComplete=\"false\"\n          onSubmit={handleModalForm}\n        >\n          <ModalContactIcon>\n            <AiOutlineClose size={20} onClick={handleModal} />\n          </ModalContactIcon>\n\n          <ModalContactTitle>Edit Contact</ModalContactTitle>\n          <ContactDiv>\n            <ContactLabel htmlFor=\"modalName\">Name</ContactLabel>\n            <input\n              id=\"modalName\"\n              className=\"input-field\"\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={handleChange}\n            />\n          </ContactDiv>\n\n          <ContactDiv>\n            <ContactLabel htmlFor=\"modalNumber\">Tel</ContactLabel>\n            <input\n              id=\"modalNumber\"\n              className=\"input-field\"\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"^[+]?[0-9\\\\.\\\\-\\\\s]{1,15}$\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              value={number}\n              onChange={handleChange}\n              required\n            />\n          </ContactDiv>\n\n          <ContactButton type=\"submit\">Send</ContactButton>\n        </ContactUiForm>\n      </ModalContactWindow>\n    </ModalContactOverlay>,\n    document.querySelector('#portal-modal')\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactListBarLi = styled.li``;\n\nexport const ContactListBarWrapper = styled.div`\n  display: grid;\n  grid-template-columns: minmax(130px, 1fr) minmax(130px, 1fr) minmax(\n      100px,\n      0.5fr\n    );\n`;\n\nexport const ContactListBarContent = styled.h3`\n  &:last-child {\n    text-align: right;\n  }\n`;\n","import {\n  ContactListBarContent,\n  ContactListBarLi,\n  ContactListBarWrapper,\n} from './contactListBar.styled';\n\nexport const ContactListBar = ({ title }) => {\n  return (\n    <ContactListBarLi>\n      <ContactListBarWrapper>\n        <ContactListBarContent>{title.name}</ContactListBarContent>\n        <ContactListBarContent>{title.phone}</ContactListBarContent>\n        <ContactListBarContent>{title.actions}</ContactListBarContent>\n      </ContactListBarWrapper>\n    </ContactListBarLi>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Contact from 'components/Contact/Contact';\nimport { ContactListUl } from './contactList.styled';\nimport { getFilter } from '../../redux/filter/selectors';\nimport { contactOperation, contactSelectors } from 'redux/contacts';\nimport ContactModal from 'components/ContactModal/ContactModal';\nimport { ContactListBar } from './ContactListBar/ContactListBar';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactSelectors.getContacts);\n  const filter = useSelector(getFilter);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalId, setModalId] = useState('');\n\n  useEffect(() => {\n    dispatch(contactOperation.fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(el =>\n    el.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleUpdate = id => {\n    setIsModalOpen(true);\n    setModalId(id);\n  };\n\n  const handleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      {contacts.length > 0 && (\n        <ContactListUl>\n          <ContactListBar\n            title={{ name: 'Name', phone: 'Phone', actions: 'Actions' }}\n          />\n          {filteredContacts.map(({ id, name, number }) => (\n            <Contact\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n              handleUpdate={handleUpdate}\n            />\n          ))}\n        </ContactListUl>\n      )}\n      {isModalOpen && (\n        <ContactModal modalId={modalId} handleModal={handleModal} />\n      )}\n    </>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport FilterContacts from 'components/FilterContacts/FilterContacts';\nimport Section from 'components/Section/Section';\nimport {\n  errorContacts,\n  isLoadingContacts,\n} from 'redux/contacts/contacts-selectors';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst ContactPage = () => {\n  const isLoading = useSelector(isLoadingContacts);\n  const isError = useSelector(errorContacts);\n  return (\n    <>\n      <ContactForm />\n      <Section title=\"Contacts\" id=\"contacts\">\n        <FilterContacts title=\"Find contacts by name\" />\n        {isLoading && <h2>Loading...</h2>}\n        {isError && <h2>Something wrong, Error</h2>}\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default ContactPage;\n"],"names":["styled","require","default","ContactFormWrapper","div","ContactUiForm","form","ContactDiv","ContactInput","input","ContactLabel","label","ContactButton","button","SectionEl","Section","children","id","Container","getContacts","state","contacts","items","isLoadingContacts","isLoading","errorContacts","error","ContactForm","dispatch","useDispatch","useSelector","contactSelectors","useState","name","setName","number","setNumber","handleChange","event","target","value","resetForm","type","autoComplete","onSubmit","preventDefault","find","el","alert","isContactAlready","contactOperation","htmlFor","pattern","placeholder","title","required","onChange","getFilter","filter","FilterContactsInput","FilterContacts","className","setFilter","ContactLi","li","ContactWrapper","ContactContent","p","ContactGroupButtons","Contact","handleUpdate","onClick","deleteContact","ContactListUl","ul","ModalContactOverlay","ModalContactWindow","ModalContactIcon","ModalContactTitle","Modal","handleModal","modalId","handleEscape","code","useEffect","window","addEventListener","removeEventListener","createPortal","currentTarget","updateContact","size","document","querySelector","ContactListBarLi","ContactListBarWrapper","ContactListBarContent","ContactListBar","phone","actions","ContactList","isModalOpen","setIsModalOpen","setModalId","filteredContacts","toLowerCase","includes","length","map","isError"],"sourceRoot":""}