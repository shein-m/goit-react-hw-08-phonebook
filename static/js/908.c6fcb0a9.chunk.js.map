{"version":3,"file":"static/js/908.c6fcb0a9.chunk.js","mappings":"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","sources":["components/ContactForm/contactForm.styled.js","components/Section/Section.jsx","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","redux/filter/selectors.js","components/FilterContacts/FilterContacts.jsx","components/Contact/contact.styled.js","components/Contact/Contact.jsx","components/ContactList/contactList.styled.js","components/ContactModal/contactModal.styled.js","components/ContactModal/ContactModal.jsx","components/ContactList/ContactList.jsx","pages/ContactPage.jsx"],"sourcesContent":["const { default: styled } = require('@emotion/styled');\n\nexport const ContactUiForm = styled.form`\n  width: 400px;\n  padding: 20px;\n  border: 2px solid rgb(17, 17, 17);\n  border-radius: 3px;\n`;\nexport const ContactDiv = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  margin-bottom: 15px;\n`;\nexport const ContactLabel = styled.label`\n  width: 100%;\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport const ContactButton = styled.button`\n  padding: 5px 10px;\n  border: 1px solid red;\n  border-radius: 5px;\n  background-color: transparent;\n  font-size: 16px;\n  cursor: pointer;\n`;\n","import PropTypes from 'prop-types';\n\nexport default function Section({ children, title }) {\n  return (\n    <>\n      <section>\n        <h2>{title}</h2>\n        {children}\n      </section>\n    </>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","export const getContacts = state => state.contacts.items;\nexport const isLoadingContacts = state => state.contacts.isLoading;\nexport const errorContacts = state => state.contacts.error;\n","import { useState } from 'react';\nimport {\n  ContactButton,\n  ContactDiv,\n  ContactLabel,\n  ContactUiForm,\n} from './contactForm.styled';\nimport Section from 'components/Section/Section';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactSelectors, contactOperation } from 'redux/contacts';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(contactSelectors.getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    if (name === 'name') {\n      setName(value);\n    }\n\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const isContactAlready = name => {\n    const checkContacts = contacts.find(el => el.name === name);\n\n    if (checkContacts) {\n      alert(`${name} is already in contacts`);\n      return true;\n    }\n  };\n\n  const handleForm = event => {\n    event.preventDefault();\n\n    if (!isContactAlready(name)) {\n      dispatch(contactOperation.addContact({ name, number }));\n    }\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Section title=\"Phonebook\">\n      <ContactUiForm type=\"submit\" autoComplete=\"false\" onSubmit={handleForm}>\n        <ContactDiv>\n          <ContactLabel htmlFor=\"name\">Name</ContactLabel>\n          <input\n            className=\"input-field\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </ContactDiv>\n\n        <ContactDiv>\n          <ContactLabel htmlFor=\"number\">Tel</ContactLabel>\n          <input\n            className=\"input-field\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"^[+]?[0-9\\\\.\\\\-\\\\s]{1,15}$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={handleChange}\n            required\n          />\n        </ContactDiv>\n\n        <ContactButton type=\"submit\">add contact</ContactButton>\n      </ContactUiForm>\n    </Section>\n  );\n}\n","export const getFilter = state => state.filter;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setFilter } from 'redux/filter/filter';\nimport { useSelector } from 'react-redux';\nimport { getFilter } from 'redux/filter/selectors';\n\nexport default function FilterContacts({ title }) {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <>\n      <h3>{title}</h3>\n      <input\n        className=\"input-field filter\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </>\n  );\n}\n\nFilterContacts.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","const { default: styled } = require('@emotion/styled');\n\nexport const ContactLi = styled.li``;\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const ContactContent = styled.p``;\n\nexport const ContactGroupButtons = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const ContactButton = styled.button`\n  display: flex;\n  align-items: center;\n\n  padding: 0px;\n\n  font-size: 18px;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n\n  &:hover {\n    border-color: #111111;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  ContactButton,\n  ContactLi,\n  ContactWrapper,\n  ContactContent,\n  ContactGroupButtons,\n} from './contact.styled';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { BiTrash, BiEdit } from 'react-icons/bi';\n\nexport default function Contact({ name, number, id, handleUpdate }) {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ContactLi>\n        <ContactWrapper>\n          <ContactContent>\n            {name}: {number}\n          </ContactContent>\n          <ContactGroupButtons>\n            {' '}\n            <ContactButton\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              <BiTrash />\n            </ContactButton>\n            <ContactButton type=\"button\" onClick={() => handleUpdate(id)}>\n              <BiEdit />\n            </ContactButton>\n          </ContactGroupButtons>\n        </ContactWrapper>\n      </ContactLi>\n    </>\n  );\n}\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","const { default: styled } = require('@emotion/styled');\n\nexport const ContactListUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  width: 400px;\n`;\nexport const ContactListLi = styled.li``;\n","import styled from '@emotion/styled';\n\nexport const ModalContactOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\nexport const ModalContactWindow = styled.div`\n  position: relative;\n  background-color: white;\n  overflow: hidden;\n  border-radius: 10px;\n`;\n\nexport const ModalContactIcon = styled.div`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n  cursor: pointer;\n`;\n\nexport const ModalContactTitle = styled.h2`\n  font-style: 24px;\n  margin: 0 0 15px 0;\n`;\n\nexport const ContactUiForm = styled.form`\n  width: 400px;\n  padding: 20px;\n`;\n\nexport const ContactDiv = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  margin-bottom: 15px;\n`;\nexport const ContactLabel = styled.label`\n  width: 100%;\n  font-size: 18px;\n  font-weight: 600;\n`;\nexport const ContactButton = styled.button`\n  padding: 5px 10px;\n  border: 1px solid red;\n  border-radius: 5px;\n  background-color: transparent;\n  font-size: 16px;\n  cursor: pointer;\n`;\n","import { createPortal } from 'react-dom';\nimport { useEffect, useState } from 'react';\nimport {\n  ContactButton,\n  ContactDiv,\n  ContactLabel,\n  ContactUiForm,\n  ModalContactWindow,\n  ModalContactOverlay,\n  ModalContactTitle,\n  ModalContactIcon,\n} from './contactModal.styled';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contacts-operations';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nexport default function Modal({ handleModal, modalId }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    if (name === 'name') {\n      setName(value);\n    }\n\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleEscape = event => {\n    if (event.code === 'Escape') {\n      handleModal();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleEscape);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  });\n\n  const handleOverlayClick = event => {\n    if (event.target === event.currentTarget) {\n      handleModal();\n    }\n  };\n\n  const handleModalForm = event => {\n    event.preventDefault();\n    dispatch(updateContact({ id: modalId, name, number }));\n    handleModal();\n  };\n\n  return createPortal(\n    <ModalContactOverlay onClick={handleOverlayClick}>\n      <ModalContactWindow>\n        <ContactUiForm\n          type=\"submit\"\n          autoComplete=\"false\"\n          onSubmit={handleModalForm}\n        >\n          <ModalContactIcon>\n            <AiOutlineClose size={20} onClick={handleModal} />\n          </ModalContactIcon>\n\n          <ModalContactTitle>Edit Contact</ModalContactTitle>\n          <ContactDiv>\n            <ContactLabel htmlFor=\"modalName\">Name</ContactLabel>\n            <input\n              id=\"modalName\"\n              className=\"input-field\"\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={handleChange}\n            />\n          </ContactDiv>\n\n          <ContactDiv>\n            <ContactLabel htmlFor=\"modalNumber\">Tel</ContactLabel>\n            <input\n              id=\"modalNumber\"\n              className=\"input-field\"\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"^[+]?[0-9\\\\.\\\\-\\\\s]{1,15}$\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              value={number}\n              onChange={handleChange}\n              required\n            />\n          </ContactDiv>\n\n          <ContactButton type=\"submit\">Send</ContactButton>\n        </ContactUiForm>\n      </ModalContactWindow>\n    </ModalContactOverlay>,\n    document.querySelector('#portal-modal')\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Contact from 'components/Contact/Contact';\nimport { ContactListUl } from './contactList.styled';\nimport { getFilter } from '../../redux/filter/selectors';\nimport { contactOperation, contactSelectors } from 'redux/contacts';\nimport ContactModal from 'components/ContactModal/ContactModal';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactSelectors.getContacts);\n  const filter = useSelector(getFilter);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalId, setModalId] = useState('');\n\n  useEffect(() => {\n    dispatch(contactOperation.fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(el =>\n    el.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleUpdate = id => {\n    setIsModalOpen(true);\n    setModalId(id);\n  };\n\n  const handleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      {contacts.length > 0 && (\n        <ContactListUl>\n          {filteredContacts.map(({ id, name, number }) => (\n            <Contact\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n              handleUpdate={handleUpdate}\n            />\n          ))}\n        </ContactListUl>\n      )}\n      {isModalOpen && (\n        <ContactModal modalId={modalId} handleModal={handleModal} />\n      )}\n    </>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport FilterContacts from 'components/FilterContacts/FilterContacts';\nimport Section from 'components/Section/Section';\nimport {\n  errorContacts,\n  isLoadingContacts,\n} from 'redux/contacts/contacts-selectors';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst ContactPage = () => {\n  const isLoading = useSelector(isLoadingContacts);\n  const isError = useSelector(errorContacts);\n  return (\n    <>\n      <ContactForm />\n      <Section title=\"Contacts\">\n        <FilterContacts title=\"Find contacts by name\" />\n        {isLoading && <h2>Loading...</h2>}\n        {isError && <h2>Something wrong, Error</h2>}\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default ContactPage;\n"],"names":["styled","require","default","ContactUiForm","form","ContactDiv","div","ContactLabel","label","ContactButton","button","Section","children","title","getContacts","state","contacts","items","isLoadingContacts","isLoading","errorContacts","error","ContactForm","dispatch","useDispatch","useSelector","contactSelectors","useState","name","setName","number","setNumber","handleChange","event","target","value","resetForm","type","autoComplete","onSubmit","preventDefault","find","el","alert","isContactAlready","contactOperation","htmlFor","className","pattern","required","onChange","getFilter","filter","FilterContacts","setFilter","ContactLi","li","ContactWrapper","ContactContent","p","ContactGroupButtons","Contact","id","handleUpdate","onClick","deleteContact","ContactListUl","ul","ModalContactOverlay","ModalContactWindow","ModalContactIcon","ModalContactTitle","Modal","handleModal","modalId","handleEscape","code","useEffect","window","addEventListener","removeEventListener","createPortal","currentTarget","updateContact","size","document","querySelector","ContactList","isModalOpen","setIsModalOpen","setModalId","filteredContacts","toLowerCase","includes","length","map","isError"],"sourceRoot":""}